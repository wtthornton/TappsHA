name: Test Phase - Visual Regression & Screenshot Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_VERSION: '1.48.0'

jobs:
  # Unit and Integration Tests
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Run linting
        working-directory: frontend
        run: npm run lint
        
      - name: Run unit tests
        working-directory: frontend
        run: npm run test:coverage
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/coverage
          flags: frontend
          name: frontend-coverage

  # Visual Regression Tests
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps
        
      - name: Build application
        working-directory: frontend
        run: npm run build
        
      - name: Start application
        working-directory: frontend
        run: npm run preview &
        
      - name: Wait for application to start
        run: sleep 10
        
      - name: Run visual regression tests
        working-directory: frontend
        run: npm run test:visual
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
            frontend/tests/e2e/screenshots/

  # Cross-Browser Tests
  cross-browser-tests:
    name: Cross-Browser Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps
        
      - name: Build application
        working-directory: frontend
        run: npm run build
        
      - name: Start application
        working-directory: frontend
        run: npm run preview &
        
      - name: Wait for application to start
        run: sleep 10
        
      - name: Run cross-browser tests
        working-directory: frontend
        run: npm run test:e2e -- --project=chromium --project=firefox --project=webkit
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cross-browser-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

  # Screenshot Validation
  screenshot-validation:
    name: Screenshot Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps
        
      - name: Build application
        working-directory: frontend
        run: npm run build
        
      - name: Start application
        working-directory: frontend
        run: npm run preview &
        
      - name: Wait for application to start
        run: sleep 10
        
      - name: Capture baseline screenshots
        working-directory: frontend
        run: |
          mkdir -p tests/e2e/screenshots/baseline
          npx playwright test --grep @visual --project=chromium
          
      - name: Upload baseline screenshots
        uses: actions/upload-artifact@v4
        with:
          name: baseline-screenshots
          path: frontend/tests/e2e/screenshots/baseline/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: frontend
        run: npx playwright install --with-deps
        
      - name: Build application
        working-directory: frontend
        run: npm run build
        
      - name: Start application
        working-directory: frontend
        run: npm run preview &
        
      - name: Wait for application to start
        run: sleep 10
        
      - name: Run performance tests
        working-directory: frontend
        run: |
          # Measure page load time
          npx playwright test --grep "performance" --project=chromium
          
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: frontend/test-results/

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, visual-tests, cross-browser-tests, screenshot-validation, performance-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results
          
      - name: Generate test summary
        run: |
          echo "## Test Phase Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Unit Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Visual Regression Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.visual-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Cross-Browser Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.cross-browser-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Screenshot Validation" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.screenshot-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Performance Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          
      - name: Check overall test status
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.visual-tests.result }}" == "success" && "${{ needs.cross-browser-tests.result }}" == "success" ]]; then
            echo "All critical tests passed!"
            exit 0
          else
            echo "Some tests failed. Please review the results."
            exit 1
          fi 