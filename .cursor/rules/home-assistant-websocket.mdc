# Home Assistant WebSocket API Rules

## MANDATORY: WebSocket API Implementation Standards

**ALWAYS** follow the official Home Assistant WebSocket API patterns when implementing real-time communication.

### WebSocket Connection Standards

#### Connection Establishment
- **ALWAYS** connect to `/api/websocket` endpoint
- **ALWAYS** implement proper WebSocket handshake
- **ALWAYS** handle connection errors gracefully
- **ALWAYS** implement connection timeout handling

#### Authentication Flow
- **ALWAYS** wait for `auth_required` message from server
- **ALWAYS** send auth message with access token:
```json
{
  "type": "auth",
  "access_token": "YOUR_LONG_LIVED_ACCESS_TOKEN"
}
```
- **ALWAYS** handle `auth_ok` response for successful authentication
- **ALWAYS** handle `auth_invalid` response for failed authentication
- **ALWAYS** disconnect and retry on authentication failure

#### Message Format Standards
- **ALWAYS** use JSON format for all messages
- **ALWAYS** include `type` field in every message
- **ALWAYS** include unique `id` field for request/response correlation
- **ALWAYS** handle message serialization/deserialization properly

### Event Subscription Standards

#### Subscribe to Events
- **ALWAYS** use `subscribe_events` command for event subscription
- **ALWAYS** specify `event_type` for specific event filtering
- **ALWAYS** handle subscription confirmation responses
- **ALWAYS** implement proper event unsubscription

#### Event Message Format
- **ALWAYS** handle `state_changed` events for device state updates
- **ALWAYS** process both `old_state` and `new_state` data
- **ALWAYS** extract `entity_id`, `state`, and `attributes` from events
- **ALWAYS** handle event timestamps properly
- **ALWAYS** validate event data structure

### Heartbeat and Connection Health

#### Ping/Pong Mechanism
- **ALWAYS** implement ping/pong for connection health monitoring
- **ALWAYS** send ping messages periodically (every 30-60 seconds)
- **ALWAYS** handle pong responses
- **ALWAYS** detect connection issues from missing pong responses
- **ALWAYS** implement connection timeout handling

#### Connection Monitoring
- **ALWAYS** monitor connection status continuously
- **ALWAYS** implement automatic reconnection on connection loss
- **ALWAYS** use exponential backoff for reconnection attempts
- **ALWAYS** log connection state changes
- **ALWAYS** implement connection health metrics

### Error Handling Standards

#### Error Response Handling
- **ALWAYS** handle `success: false` responses
- **ALWAYS** process error codes and messages
- **ALWAYS** implement proper error logging
- **ALWAYS** provide meaningful error messages to users
- **ALWAYS** implement graceful degradation on errors

#### Common Error Codes
- **ALWAYS** handle `invalid_format` errors
- **ALWAYS** handle `service_validation_error` errors
- **ALWAYS** handle `auth_invalid` errors
- **ALWAYS** handle connection timeout errors
- **ALWAYS** handle network-related errors

### Feature Support Standards

#### Coalesce Messages
- **ALWAYS** enable `coalesce_messages` feature for bulk processing
- **ALWAYS** send feature enablement message after authentication:
```json
{
  "id": 1,
  "type": "supported_features",
  "features": { "coalesce_messages": 1 }
}
```
- **ALWAYS** handle bulk message processing
- **ALWAYS** implement proper message buffering

#### Message Correlation
- **ALWAYS** use unique message IDs for request/response correlation
- **ALWAYS** track pending requests and their responses
- **ALWAYS** implement request timeout handling
- **ALWAYS** clean up completed request/response pairs

### State Management Standards

#### State Change Processing
- **ALWAYS** subscribe to `state_changed` events for real-time updates
- **ALWAYS** process state change events immediately
- **ALWAYS** validate state data before processing
- **ALWAYS** store state changes in database
- **ALWAYS** trigger appropriate business logic on state changes

#### State Data Structure
- **ALWAYS** handle `entity_id` field
- **ALWAYS** process `state` field (current state value)
- **ALWAYS** extract `attributes` object
- **ALWAYS** handle `last_changed` and `last_updated` timestamps
- **ALWAYS** validate state data integrity

### Performance and Scalability

#### Message Processing
- **ALWAYS** implement efficient message processing
- **ALWAYS** use async/await patterns for non-blocking operations
- **ALWAYS** implement message queuing for high-volume scenarios
- **ALWAYS** monitor message processing performance
- **ALWAYS** implement backpressure handling

#### Connection Management
- **ALWAYS** implement connection pooling for multiple connections
- **ALWAYS** handle multiple concurrent connections
- **ALWAYS** implement proper resource cleanup
- **ALWAYS** monitor connection performance metrics
- **ALWAYS** implement connection load balancing if needed

### Security Standards

#### Authentication Security
- **ALWAYS** use long-lived access tokens for authentication
- **ALWAYS** encrypt access tokens in configuration
- **ALWAYS** implement secure token storage
- **ALWAYS** rotate access tokens regularly
- **ALWAYS** validate token permissions

#### Communication Security
- **ALWAYS** use WSS (WebSocket Secure) for production
- **ALWAYS** validate server certificates
- **ALWAYS** implement proper SSL/TLS handling
- **ALWAYS** log security-related events
- **ALWAYS** implement rate limiting

### Testing Standards

#### WebSocket Testing
- **ALWAYS** test against actual Home Assistant instances
- **ALWAYS** test authentication flow
- **ALWAYS** test event subscription and processing
- **ALWAYS** test connection failure scenarios
- **ALWAYS** test reconnection mechanisms

#### Integration Testing
- **ALWAYS** test with real Home Assistant devices
- **ALWAYS** validate event processing accuracy
- **ALWAYS** test performance under load
- **ALWAYS** test error handling scenarios
- **ALWAYS** validate data integrity

### Documentation Requirements

#### Code Documentation
- **ALWAYS** cite WebSocket API documentation in comments
- **ALWAYS** document message formats and structures
- **ALWAYS** explain authentication flow implementation
- **ALWAYS** document error handling strategies
- **ALWAYS** include performance considerations

#### Architecture Documentation
- **ALWAYS** document WebSocket connection architecture
- **ALWAYS** explain event processing pipeline
- **ALWAYS** document error handling and recovery
- **ALWAYS** include security considerations
- **ALWAYS** document performance optimizations

### Reference Links
- **WebSocket API Documentation:** https://developers.home-assistant.io/docs/api/websocket/
- **REST API Documentation:** https://developers.home-assistant.io/docs/api/rest/
- **External APIs Index:** https://developers.home-assistant.io/docs/api/
- **Development Index:** https://developers.home-assistant.io/docs/development_index
description:
globs:
alwaysApply: false
---
