# Automated Compliance Enforcement

## MANDATORY: Real-Time Standards Validation

**ALWAYS** validate code against .agent-os standards in real-time and provide immediate feedback for compliance violations.

### Real-Time Validation Rules

#### Technology Stack Compliance
**ALWAYS** validate against `@~/.agent-os/standards/tech-stack.md`:
- **Spring Boot 3.3+** (Java 21 LTS) for backend
- **React 19** with TypeScript 5 for frontend
- **PostgreSQL 17** with pgvector extension
- **Docker 24** with Compose V2
- **Prometheus v2.50 + Grafana 11** for monitoring

#### Code Style Validation
**ALWAYS** validate against `@~/.agent-os/standards/code-style.md`:
- **2 spaces indentation** (no tabs)
- **100 characters max** line length
- **PascalCase** for components/classes
- **camelCase** for variables/functions
- **Functional components** with hooks (React)
- **Proper TypeScript types** for all variables

#### Security Validation
**ALWAYS** validate against `@~/.agent-os/standards/security-compliance.md`:
- **No hardcoded secrets** - use environment variables
- **Input validation** for all user inputs
- **SQL injection prevention** with @Param annotations
- **HTTPS/TLS 1.3** for all communications
- **OWASP Top-10** compliance

#### Architecture Validation
**ALWAYS** validate against `@~/.agent-os/standards/best-practices.md`:
- **Controller ‚Üí Service ‚Üí Repository** pattern
- **Clear separation of concerns**
- **Proper exception handling** with @ControllerAdvice
- **Spring Security** with OAuth 2.1
- **Observability** with Spring Boot Actuator

#### Testing Validation
**ALWAYS** validate against `@~/.agent-os/standards/testing-strategy.md`:
- **‚â•85% branch coverage** requirement
- **Unit tests** for all new functionality
- **Integration tests** for critical paths
- **Security testing** for new features
- **Performance testing** for scalability

### Automated Feedback System

#### Immediate Violation Detection
**ALWAYS** provide instant feedback when violations are detected:
- **Critical violations** (üö®) - Block commits and require immediate fixes
- **Warning violations** (‚ö†Ô∏è) - Suggest improvements but allow continuation
- **Auto-fix suggestions** for common violations
- **Specific line numbers** and file locations for violations

#### Auto-Fix Suggestions
**ALWAYS** provide specific fix suggestions:

**Code Style Violations:**
- Split long lines (>100 chars) into multiple lines
- Replace tabs with 2 spaces for indentation
- Use proper naming conventions (PascalCase/camelCase)

**Security Violations:**
- Replace hardcoded secrets with environment variables
- Add @Param annotations for dynamic SQL queries
- Implement proper input validation

**Architecture Violations:**
- Add @RestController and @RequestMapping annotations
- Add @Service annotation to service classes
- Add @Repository annotation or extend JpaRepository

**Technology Stack Violations:**
- Update Spring Boot to 3.3+ in pom.xml
- Update React to version 19.x in package.json
- Add missing dependencies for required technologies

### Compliance Scoring System

#### Real-Time Scoring
**ALWAYS** calculate and display compliance scores:
- **Overall compliance score** (0-100%)
- **Category-specific scores** (Technology Stack, Code Style, Security, etc.)
- **Trend analysis** showing improvement over time
- **Violation count** by severity (Critical/Warning)

#### Compliance Thresholds
**ALWAYS** enforce minimum compliance thresholds:
- **Critical violations** = 0 (block commits)
- **Overall score** ‚â• 85% (recommended)
- **Security score** = 100% (mandatory)
- **Testing coverage** ‚â• 85% (mandatory)

### Integration with Development Workflow

#### Pre-Commit Validation
**ALWAYS** run comprehensive validation before commits:
- Check all modified files against standards
- Block commits with critical violations
- Generate compliance report for PR description
- Update compliance dashboard automatically

#### Real-Time Development Feedback
**ALWAYS** provide feedback during development:
- Validate files on save
- Show violations in real-time
- Suggest improvements as you type
- Track compliance trends over time

#### CI/CD Integration
**ALWAYS** integrate with CI/CD pipeline:
- Run compliance checks on every PR
- Generate compliance reports
- Block merges on critical violations
- Track compliance metrics over time

### Automated Compliance Tools

#### Compliance Checker Integration
**ALWAYS** use the automated compliance checker:
```bash
# Check entire codebase
node .agent-os/tools/compliance-checker.js

# Check specific file
node .agent-os/tools/compliance-checker.js path/to/file.java

# Real-time validation
node .agent-os/tools/cursor-integration.js watch
```

#### Dashboard Integration
**ALWAYS** maintain compliance dashboard:
- Real-time compliance scores
- Violation tracking and trends
- Improvement suggestions
- Historical compliance data

### Validation Checklist

Before any code submission, verify:
- [ ] Technology stack matches standards
- [ ] Code style follows conventions
- [ ] Security measures are implemented
- [ ] Architecture patterns are followed
- [ ] Testing coverage meets requirements
- [ ] No critical violations exist
- [ ] Overall compliance score ‚â• 85%
- [ ] Compliance report is generated

### Enforcement Actions

#### Critical Violations (üö®)
**ALWAYS** block commits and require immediate fixes:
- Security vulnerabilities
- Hardcoded secrets
- Missing critical dependencies
- Architecture violations

#### Warning Violations (‚ö†Ô∏è)
**ALWAYS** suggest improvements but allow continuation:
- Code style issues
- Performance optimizations
- Documentation improvements
- Testing enhancements

#### Auto-Fix Actions
**ALWAYS** provide automated fix suggestions:
- Code formatting fixes
- Dependency updates
- Security improvements
- Architecture enhancements

### Reference Standards

#### Core Standards
- **Technology Stack:** `@~/.agent-os/standards/tech-stack.md`
- **Code Style:** `@~/.agent-os/standards/code-style.md`
- **Best Practices:** `@~/.agent-os/standards/best-practices.md`
- **Security Compliance:** `@~/.agent-os/standards/security-compliance.md`
- **Testing Strategy:** `@~/.agent-os/standards/testing-strategy.md`
- **Enforcement:** `@~/.agent-os/standards/enforcement.md`

#### Compliance Tools
- **Compliance Checker:** `.agent-os/tools/compliance-checker.js`
- **Cursor Integration:** `.agent-os/tools/cursor-integration.js`
- **Compliance Dashboard:** `.agent-os/dashboard/compliance-dashboard.html`

description: Automated compliance enforcement with real-time validation and feedback
globs: ["**/*.{js,ts,jsx,tsx,java,py,go,rs,php,rb,cs,kt,scala,clj,hs,fs,ml,swift,kotlin}"]
alwaysApply: true
---
description:
globs:
alwaysApply: false
---
