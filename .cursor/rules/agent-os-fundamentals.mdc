# Agent OS Fundamentals - Mandatory Loading

## Overview

This rule ensures that every development session starts with a complete understanding of Agent OS standards, processes, and requirements. **ALWAYS** load these fundamentals before beginning any development work.

## Mandatory Pre-Development Checklist

### 1. Load Agent OS Fundamentals
**ALWAYS** read these documents first:
- `@~/.agent-os/AGENT-OS-FUNDAMENTALS.md` - Complete framework understanding
- `@~/.agent-os/QUICK-START-GUIDE.md` - Quick start instructions

### 2. Run Compliance Check
**ALWAYS** run compliance check before starting:
```bash
node .agent-os/tools/full-compliance-check.js
```

### 3. Load Relevant Standards
**ALWAYS** review these standards before development:
- `@~/.agent-os/standards/tech-stack.md` - Technology choices
- `@~/.agent-os/standards/code-style.md` - Coding conventions  
- `@~/.agent-os/standards/best-practices.md` - Development principles
- `@~/.agent-os/standards/security-compliance.md` - Security requirements
- `@~/.agent-os/standards/testing-strategy.md` - Testing approach
- `@~/.agent-os/standards/enforcement.md` - Mandatory rules

## Core Agent OS Principles

### 1. Standards First, Automation Always
- **ALWAYS** check standards before making decisions
- **NEVER** deviate from standards without justification
- **ALWAYS** use automated compliance checking
- **ALWAYS** validate against compliance requirements

### 2. Mandatory Technology Stack
**ALWAYS** use these technologies:
- **Backend:** Spring Boot 3.3+ (Java 21 LTS) with REST + gRPC + async events (Kafka)
- **Frontend:** React 19 stable with TypeScript 5
- **Database:** PostgreSQL 17 with pgvector extension
- **Time Series:** InfluxDB 3 Core (Docker)
- **AI/ML:** OpenAI GPT-4o, pgvector, LangChain 0.2
- **Build:** Vite 5.x, TailwindCSS 4.x + shadcn/ui
- **State:** TanStack Query 5, Context API
- **Runtime:** Docker 24, Compose V2
- **Observability:** Prometheus v2.50, Grafana 11, Loki 3

### 3. Code Generation Patterns
**ALWAYS** follow these patterns:

#### Backend Code (Java/Spring Boot)
```java
// ALWAYS use these patterns:
@RestController
@RequestMapping("/api/v1")
public class ExampleController {
    
    private final ExampleService exampleService;
    
    public ExampleController(ExampleService exampleService) {
        this.exampleService = exampleService;
    }
    
    @GetMapping("/examples")
    public ResponseEntity<List<ExampleDto>> getExamples() {
        return ResponseEntity.ok(exampleService.findAll());
    }
}
```

#### Frontend Code (React/TypeScript)
```typescript
// ALWAYS use these patterns:
import { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';

interface ExampleProps {
  id: string;
}

export const ExampleComponent: React.FC<ExampleProps> = ({ id }) => {
  const { data, isLoading } = useQuery({
    queryKey: ['example', id],
    queryFn: () => fetchExample(id),
  });
  
  if (isLoading) return <div>Loading...</div>;
  
  return <div>{data?.name}</div>;
};
```

## Development Workflow

### 1. Pre-Development Steps
**ALWAYS** complete these steps before starting:
1. **Load Context** - Load relevant spec, tasks.md, and standards
2. **Check Compliance** - Run compliance checker before starting
3. **Verify Standards** - Ensure technology stack and patterns match standards

### 2. During Development
**ALWAYS** follow this process:
1. **Execute Tasks** - Follow Controller → Service → Repository pattern
2. **Update Progress** - Immediately update tasks.md after each subtask
3. **Run Tests** - Ensure all tests pass before proceeding
4. **Validate Compliance** - Run compliance checker after completion
5. **Update Lessons Learned** - Capture insights for future improvements

### 3. Post-Development Steps
**ALWAYS** complete these steps after finishing:
1. **Final Compliance Check** - Run full compliance check
2. **Update Progress** - Mark completed tasks in tasks.md
3. **Capture Lessons** - Document insights and improvements

## Compliance Requirements

### Compliance Thresholds
- **Critical Violations:** 0 (blocking)
- **Overall Compliance Score:** ≥85%
- **Security Compliance:** 100%
- **Testing Coverage:** ≥85%
- **Code Quality Score:** ≥80%

### Compliance Categories
1. **Technology Stack** - Verify correct versions and dependencies
2. **Code Style** - Check formatting, naming conventions, structure
3. **Security** - Detect vulnerabilities, hardcoded secrets
4. **Architecture** - Verify patterns and design principles
5. **Testing** - Ensure adequate coverage and test quality
6. **Performance** - Check for performance issues and optimizations

## Task Tracking Standards

### Mandatory Task Updates
**ALWAYS** update tasks.md immediately after completing any subtask:
- Mark completed subtasks with `[x]` immediately after completion
- Add progress notes for completed sections
- Update completion percentages and overall progress
- Document session summaries with completed tasks and next priorities

### Task File Structure
- **Required Sections:** Tasks, Recent Completion Summary, Next Priority Tasks, Overall Progress
- **Progress Documentation:** Include timestamps, detailed descriptions, and next steps
- **Quality Standards:** Clear task names, sufficient detail, chronological order
- **Integration:** Reference tasks.md in development workflow and documentation

## Strategic Questions Framework

### Strategic Questions Location
**ALWAYS** save strategic questions in `.agent-os/product/strategic-questions/` directory:
- Use template format from `qa-template.md`
- Include proper document metadata
- Organize by logical categories
- Include critical priority questions clearly

### Strategic Questions Research
**ALWAYS** conduct deep research using multiple data sources:
- Follow answer template format from `answer-template.md`
- Save answer documents in `answers/` directory with timestamped filenames
- Provide evidence-based answers with comprehensive research findings
- Include implementation-ready recommendations

## Quality Assurance

### Pre-Submission Checklist
Before submitting any code, verify:
- [ ] Technology stack matches standards
- [ ] Code style follows conventions
- [ ] Best practices align with standards
- [ ] Security standards are followed
- [ ] CI/CD strategy is implemented
- [ ] Testing strategy meets requirements
- [ ] Architecture follows layered pattern
- [ ] Tests meet ≥85% branch coverage requirement
- [ ] Security measures are implemented
- [ ] Performance requirements are met
- [ ] Documentation is updated
- [ ] Strategic questions follow proper format and location standards
- [ ] All standards enforcement rules are followed

## Emergency Procedures

### Critical Violations Detected
If critical violations are detected:
1. **Stop Development** - Immediately halt current work
2. **Assess Impact** - Evaluate severity and scope
3. **Fix Violations** - Address critical issues before proceeding
4. **Revalidate** - Run compliance check again
5. **Document** - Record the issue and resolution

### Standards Conflicts
If standards appear to conflict:
1. **Check Hierarchy** - Review standards priority order
2. **Consult Documentation** - Check for clarification in standards
3. **Apply Common Sense** - Use best judgment for safety/security
4. **Document Decision** - Record the decision and rationale
5. **Update Standards** - Clarify standards if needed

## Essential Commands

### Compliance Checking
```bash
# Full compliance check
node .agent-os/tools/full-compliance-check.js

# Real-time validation
node .agent-os/tools/cursor-integration.js watch

# Generate detailed report
node .agent-os/tools/compliance-checker.js --report

# Check specific file
node .agent-os/tools/compliance-checker.js path/to/file.java
```

### Task Management
```bash
# Find current tasks
find .agent-os -name "tasks.md" -exec grep -l "\[ \]" {} \;

# Update task progress
# Edit tasks.md and mark completed items with [x]

# Check overall progress
grep -r "Overall Progress" .agent-os/specs/*/tasks.md
```

## Lessons Learned Integration

### Capture Process
**ALWAYS** capture lessons learned after each task:
1. **Document Insights** - What worked, what didn't, why
2. **Update Standards** - Modify standards based on new insights
3. **Improve Processes** - Enhance workflows and checklists
4. **Share Knowledge** - Update documentation and templates

### Application Process
**ALWAYS** apply lessons learned:
1. **Check Lessons** - Review relevant lessons before starting
2. **Apply Patterns** - Use proven patterns and avoid known issues
3. **Update Standards** - Incorporate new insights into standards
4. **Validate Improvements** - Test new approaches and document results

## Cursor AI Integration

### AI-Assisted Development
**ALWAYS** use Cursor AI with Agent OS rules:
- **Standards Compliance** - All generated code must follow standards
- **Pattern Consistency** - Use established patterns and conventions
- **Quality Gates** - Validate against compliance requirements
- **Lessons Learned** - Apply captured insights automatically

### Code Generation Guidelines
1. **Code Generation** - Generate code that follows standards
2. **Refactoring** - Improve existing code to meet standards
3. **Testing** - Generate comprehensive test suites
4. **Documentation** - Create clear, consistent documentation

## Continuous Improvement

### Monitor Compliance
1. **Track Compliance Scores** - Monitor trends over time
2. **Identify Patterns** - Recognize recurring issues and opportunities
3. **Update Standards** - Refine standards based on lessons learned
4. **Enhance Tools** - Improve automation and validation capabilities
5. **Share Knowledge** - Document and share best practices

### Success Metrics
- **Compliance Score:** ≥85%
- **Test Coverage:** ≥85%
- **Security Violations:** 0
- **Critical Violations:** 0
- **Lessons Learned:** Captured and applied systematically

---

**Agent OS Fundamentals** - The foundation for consistent, high-quality development with automated compliance and continuous improvement.

**Remember:** Every development decision should align with Agent OS standards, and every process should leverage the automation and validation tools provided by the framework.
description:
globs:
alwaysApply: false
---
