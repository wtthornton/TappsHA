# Advanced Governance Standards Integration

## MANDATORY: Advanced Governance Compliance

**ALWAYS** apply advanced governance standards when implementing features, reviewing code, or making architectural decisions.

### AI-Assisted Governance Integration

#### Automated Compliance Checking
**ALWAYS** use AI to scan code for standards violations:
- Check for security anti-patterns and vulnerabilities
- Verify coding standards compliance
- Detect performance issues and optimization opportunities
- Validate architectural patterns and design principles

#### Smart Testing Generation
**ALWAYS** leverage AI for comprehensive testing:
- Generate missing unit tests based on code coverage gaps
- Create integration tests for critical paths
- Suggest regression tests for changed functionality
- Identify edge cases and boundary conditions

#### Knowledge Management
**ALWAYS** maintain traceability and documentation:
- Auto-link commits to PRDs and tasks
- Generate architectural documentation from code changes
- Create changelogs and release notes
- Maintain API documentation and examples

### Cursor Rule Hierarchy Enforcement

#### Always Rules (Non-Negotiable)
**ALWAYS** enforce these rules without exception:
- Security hardening and vulnerability prevention
- SBOM generation and dependency scanning
- Forbidden imports and dangerous patterns
- Critical compliance requirements

#### Auto Rules (Default Recommendations)
**ALWAYS** suggest these improvements:
- Performance optimizations and refactoring
- Lint autofixes and code style improvements
- Architecture pattern recommendations
- Testing and coverage enhancements

#### Agent Rules (AI-Assisted Enhancements)
**ALWAYS** provide AI-assisted optimizations:
- PRD generation from code changes
- Documentation auto-linking and updates
- AI-based test generation and gap detection
- Architectural decision recording

### Policy-as-Code Integration

#### OPA/Rego Policy Enforcement
**ALWAYS** implement policy-as-code:
- Infrastructure security policies
- Resource allocation and cost controls
- Security compliance requirements
- Operational best practices

#### CI/CD Integration
**ALWAYS** integrate policies into CI/CD:
- GitHub Actions policy validation
- Automated security scanning
- Compliance checking in build pipeline
- Policy violation reporting

#### Supply Chain Security
**ALWAYS** implement supply chain security:
- Sigstore for artifact signing
- SLSA for provenance tracking
- Dependency vulnerability scanning
- Container image security validation

### Service-Specific Governance

#### Payment Services
**ALWAYS** enforce payment-specific rules:
- Idempotency for all POST endpoints
- PCI-compliant logging and data handling
- Secure payment processing patterns
- Transaction monitoring and alerting

#### Frontend Services
**ALWAYS** ensure frontend optimization:
- ISR (Incremental Static Regeneration) implementation
- SEO meta tags and structured data
- Analytics integration and tracking
- Performance optimization and caching

#### Database Services
**ALWAYS** optimize database operations:
- N+1 query detection and prevention
- Index creation and optimization
- Connection pooling and resource management
- Query performance monitoring

#### AI Services
**ALWAYS** validate AI model usage:
- Cost optimization and model selection
- Performance monitoring and metrics
- Error handling and fallback strategies
- Usage tracking and compliance

### Visual Regression Testing

#### Visual Testing Implementation
**ALWAYS** implement visual regression testing:
- Playwright + Percy/Chromatic for visual diffs
- Snapshot testing for React components
- Cross-browser compatibility testing
- Mobile responsiveness validation

#### Mutation Testing
**ALWAYS** use mutation testing for quality:
- Stryker or PIT for mutation testing
- Test effectiveness validation
- Coverage gap detection
- Test quality improvement

#### AI Gap Detection
**ALWAYS** leverage AI for test coverage:
- Identify untested branches or conditions
- Suggest automated test generation
- Detect missing edge cases
- Optimize test suite efficiency

### Implementation Guidelines

#### Code Review Integration
- **Automated Scanning**: Use AI to scan PRs for compliance
- **Policy Validation**: Check against all governance policies
- **Quality Assessment**: Evaluate code quality and standards adherence
- **Documentation Updates**: Ensure documentation reflects changes

#### Development Workflow
- **Pre-commit Hooks**: Validate against governance standards
- **Continuous Monitoring**: Track compliance metrics
- **Automated Reporting**: Generate compliance reports
- **Feedback Loops**: Provide immediate feedback on violations

#### Quality Assurance
- **Standards Compliance**: Verify all standards are followed
- **Performance Validation**: Ensure performance requirements are met
- **Security Verification**: Validate security measures
- **Documentation Completeness**: Ensure all changes are documented

### Validation Checklist

Before implementing any feature, verify:
- [ ] AI-assisted governance rules are applied
- [ ] Cursor rule hierarchy is followed (Always/Auto/Agent)
- [ ] Policy-as-code standards are enforced
- [ ] Service-specific rules are implemented
- [ ] Visual regression testing is configured
- [ ] Automated compliance checking is active
- [ ] Knowledge management is maintained
- [ ] Supply chain security is validated
- [ ] Performance requirements are met
- [ ] Security measures are implemented
- [ ] Documentation is updated and linked
- [ ] Test coverage meets requirements

### Reference Standards

#### Core Governance Standards
- **AI-Assisted Governance:** `@~/.agent-os/standards/ai-assisted-governance.md`
- **Cursor Rule Hierarchy:** `@~/.agent-os/standards/cursor-rule-hierarchy.md`
- **Policy-as-Code:** `@~/.agent-os/standards/policy-as-code.md`
- **Service-Specific Rules:** `@~/.agent-os/standards/service-specific-rules.md`
- **Visual Regression Testing:** `@~/.agent-os/standards/visual-regression-testing.md`

#### Integration with Core Standards
- **Technology Stack:** `@~/.agent-os/standards/tech-stack.md`
- **Code Style:** `@~/.agent-os/standards/code-style.md`
- **Best Practices:** `@~/.agent-os/standards/best-practices.md`
- **Security Compliance:** `@~/.agent-os/standards/security-compliance.md`
- **Testing Strategy:** `@~/.agent-os/standards/testing-strategy.md`
- **Enforcement:** `@~/.agent-os/standards/enforcement.md`

description: Advanced governance standards integration for AI-assisted development, policy enforcement, and service-specific rules
globs: ["**/*.{js,ts,jsx,tsx,java,py,go,rs,php,rb,cs,kt,scala,clj,hs,fs,ml,swift,kotlin}"]
alwaysApply: true
---
description:
globs:
alwaysApply: false
---
