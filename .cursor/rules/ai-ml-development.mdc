# AI/ML Development Rules for TappHA

## MANDATORY: AI Safety and Privacy

**ALWAYS** implement privacy-first AI development patterns for TappHA's Home Assistant integration.

### Privacy-First AI Architecture
- **ALWAYS** implement local-only AI processing for privacy-sensitive operations
- **ALWAYS** use OpenAI GPT-4o Mini for cost-effective AI operations
- **ALWAYS** implement user consent workflows for AI-generated changes
- **ALWAYS** provide explainable AI decisions with comprehensive audit trails
- **ALWAYS** implement emergency stop mechanisms for all AI features
- **ALWAYS** encrypt all AI model data and user interactions

### AI Integration Patterns

#### OpenAI Integration
- **ALWAYS** use OpenAI GPT-4o Mini for natural language processing
- **ALWAYS** implement proper error handling for API rate limits
- **ALWAYS** use async/await patterns for AI API calls
- **ALWAYS** implement retry mechanisms with exponential backoff
- **ALWAYS** validate AI responses before applying to Home Assistant

#### Vector Database Integration
- **ALWAYS** use pgvector for vector embeddings storage
- **ALWAYS** implement proper indexing for vector similarity searches
- **ALWAYS** use cosine similarity for vector comparisons
- **ALWAYS** implement vector dimension validation (1536 for OpenAI embeddings)

#### LangChain Integration
- **ALWAYS** use LangChain 0.3 for AI application development
- **ALWAYS** implement proper prompt engineering for Home Assistant context
- **ALWAYS** use structured output parsing for AI responses
- **ALWAYS** implement memory management for conversation context

### AI Safety Mechanisms

#### User Consent Workflow
- **ALWAYS** require explicit user approval for AI-generated automation changes
- **ALWAYS** provide clear explanations of AI reasoning before applying changes
- **ALWAYS** implement granular control preferences for AI features
- **ALWAYS** allow users to disable AI features completely

#### Emergency Stop System
- **ALWAYS** implement instant disable capability for all AI features
- **ALWAYS** provide immediate rollback for AI-generated changes
- **ALWAYS** maintain backup snapshots before AI modifications
- **ALWAYS** implement comprehensive logging for all AI decisions

#### Audit Trail Requirements
- **ALWAYS** log all AI model inputs and outputs
- **ALWAYS** record user consent decisions and timestamps
- **ALWAYS** maintain immutable audit logs with cryptographic signatures
- **ALWAYS** provide audit trail export for compliance reporting

### AI Testing Requirements

#### Unit Testing
- **ALWAYS** test AI model integration with mocked responses
- **ALWAYS** validate AI response parsing and error handling
- **ALWAYS** test user consent workflow implementations
- **ALWAYS** verify emergency stop mechanisms

#### Integration Testing
- **ALWAYS** test AI features with actual Home Assistant instances
- **ALWAYS** validate AI-generated automation syntax
- **ALWAYS** test rollback mechanisms for AI changes
- **ALWAYS** verify audit trail generation and storage

#### Performance Testing
- **ALWAYS** test AI response times (<2 seconds for user interactions)
- **ALWAYS** validate vector database query performance
- **ALWAYS** test AI model memory usage and cleanup
- **ALWAYS** verify concurrent AI operation handling

### AI Code Patterns

#### Service Layer Implementation
```java
@Service
@Transactional
public class AISuggestionService {
    
    private final OpenAIService openAIService;
    private final VectorDatabaseService vectorService;
    private final AuditTrailService auditService;
    
    public AISuggestionResponse generateSuggestion(AISuggestionRequest request) {
        // ALWAYS validate user consent first
        validateUserConsent(request.getUserId());
        
        // ALWAYS log AI operation start
        auditService.logAIOperationStart(request);
        
        try {
            // ALWAYS use structured prompts
            String prompt = buildStructuredPrompt(request);
            
            // ALWAYS handle API errors gracefully
            OpenAIResponse response = openAIService.generateResponse(prompt);
            
            // ALWAYS validate AI response
            AISuggestionResponse suggestion = validateAndParseResponse(response);
            
            // ALWAYS log successful operation
            auditService.logAIOperationSuccess(request, suggestion);
            
            return suggestion;
            
        } catch (Exception e) {
            // ALWAYS log AI operation failures
            auditService.logAIOperationFailure(request, e);
            throw new AIServiceException("AI suggestion generation failed", e);
        }
    }
}
```

#### Frontend AI Integration
```typescript
// ALWAYS implement AI consent workflow
const useAIConsent = (userId: string) => {
  const [hasConsent, setHasConsent] = useState(false);
  
  const requestAIConsent = async (operation: string) => {
    const consent = await showConsentDialog(operation);
    if (consent) {
      setHasConsent(true);
      return true;
    }
    return false;
  };
  
  return { hasConsent, requestAIConsent };
};

// ALWAYS provide AI explanation before applying changes
const AISuggestionComponent: React.FC<AISuggestionProps> = ({ suggestion }) => {
  const [showExplanation, setShowExplanation] = useState(false);
  
  const handleApplySuggestion = async () => {
    // ALWAYS show explanation before applying
    setShowExplanation(true);
    
    // ALWAYS require user confirmation
    const confirmed = await showConfirmationDialog(suggestion.explanation);
    if (confirmed) {
      await applyAISuggestion(suggestion);
    }
  };
  
  return (
    <div>
      <h3>AI Suggestion</h3>
      <p>{suggestion.description}</p>
      <button onClick={handleApplySuggestion}>
        Review and Apply
      </button>
      {showExplanation && (
        <div className="explanation-panel">
          <h4>AI Reasoning</h4>
          <p>{suggestion.explanation}</p>
          <button onClick={() => applySuggestion(suggestion)}>
            Apply Suggestion
          </button>
        </div>
      )}
    </div>
  );
};
```

### AI Configuration Requirements

#### Environment Variables
- **ALWAYS** use environment variables for AI API keys
- **ALWAYS** implement proper secrets management
- **ALWAYS** use different API keys for development and production
- **ALWAYS** implement API key rotation mechanisms

#### Performance Configuration
- **ALWAYS** set appropriate timeouts for AI API calls
- **ALWAYS** implement connection pooling for AI services
- **ALWAYS** configure proper retry mechanisms
- **ALWAYS** set memory limits for AI operations

### AI Documentation Requirements
- **ALWAYS** document AI model capabilities and limitations
- **ALWAYS** provide user guides for AI features
- **ALWAYS** document safety mechanisms and emergency procedures
- **ALWAYS** maintain API documentation for AI services

description: AI/ML development patterns for TappHA with privacy-first approach and safety mechanisms
globs: ["**/*.java", "**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"]
alwaysApply: false
---
description:
globs:
alwaysApply: false
---
