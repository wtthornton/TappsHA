name: Standards Compliance Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  compliance-check:
    name: Standards Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm install -g glob chokidar
          npm install --save-dev @types/node
          
      - name: Create compliance tools directory
        run: |
          mkdir -p .agent-os/tools
          mkdir -p .agent-os/reports
          mkdir -p .agent-os/dashboard
          
      - name: Run compliance checker
        run: |
          node .agent-os/tools/compliance-checker.js
        continue-on-error: true
        
      - name: Generate compliance report
        run: |
          node .agent-os/tools/cursor-integration.js check
        continue-on-error: true
        
      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compliance-report
          path: |
            .agent-os/reports/
            .agent-os/dashboard/
          retention-days: 30
          
      - name: Check for critical violations
        run: |
          if [ -f ".agent-os/reports/compliance-report.json" ]; then
            CRITICAL_COUNT=$(node -e "
              const report = JSON.parse(require('fs').readFileSync('.agent-os/reports/compliance-report.json', 'utf8'));
              const criticalCount = report.violations.filter(v => v.type === 'CRITICAL').length;
              console.log(criticalCount);
            ")
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "🚨 Found $CRITICAL_COUNT critical violations. Build failed."
              exit 1
            else
              echo "✅ No critical violations found."
            fi
          else
            echo "⚠️  No compliance report generated."
            exit 1
          fi
          
      - name: Comment PR with compliance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 📊 Standards Compliance Report\n\n';
            
            try {
              const report = JSON.parse(fs.readFileSync('.agent-os/reports/compliance-report.json', 'utf8'));
              
              comment += `**Overall Score:** ${report.complianceScore}%\n`;
              comment += `**Files Checked:** ${report.totalChecks}\n`;
              comment += `**Critical Issues:** ${report.summary.critical}\n`;
              comment += `**Warnings:** ${report.summary.warnings}\n\n`;
              
              if (report.violations.length > 0) {
                comment += '### 🚨 Violations Found:\n\n';
                report.violations.forEach(violation => {
                  const icon = violation.type === 'CRITICAL' ? '🚨' : '⚠️';
                  comment += `${icon} **${violation.file}:${violation.line}** - ${violation.message}\n`;
                });
              } else {
                comment += '✅ **No violations found!**\n';
              }
              
              comment += '\n---\n';
              comment += '*This report was generated by the automated compliance checker.*';
              
            } catch (error) {
              comment += '❌ **Error generating compliance report**\n';
              comment += `Error: ${error.message}\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  security-scan:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'TappHA'
          path: '.'
          format: 'HTML'
          out: 'reports'
          
      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-results
          path: reports/
          retention-days: 30

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Run ESLint (Frontend)
        run: |
          cd frontend
          npm install
          npm run lint
        continue-on-error: true
        
      - name: Run Checkstyle (Backend)
        run: |
          cd backend
          mvn checkstyle:check
        continue-on-error: true
        
      - name: Run SonarQube analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=TappHA \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  performance-test:
    name: Performance Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          
      - name: Run performance tests
        run: |
          cd backend
          mvn test -Dtest=PerformanceTest
        continue-on-error: true
        
      - name: Check performance metrics
        run: |
          # Check if performance meets standards
          # P95 response time ≤ 200ms
          # Frontend TTI ≤ 2s on LTE
          echo "Performance compliance check completed"
        continue-on-error: true

  compliance-summary:
    name: Compliance Summary
    runs-on: ubuntu-latest
    needs: [compliance-check, security-scan, code-quality, performance-test]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download compliance artifacts
        uses: actions/download-artifact@v4
        with:
          name: compliance-report
          path: .agent-os/reports/
          
      - name: Generate compliance summary
        run: |
          echo "## 📊 Compliance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f ".agent-os/reports/compliance-report.json" ]; then
            node -e "
              const report = JSON.parse(require('fs').readFileSync('.agent-os/reports/compliance-report.json', 'utf8'));
              console.log(\`- **Overall Score:** \${report.complianceScore}%\`);
              console.log(\`- **Critical Issues:** \${report.summary.critical}\`);
              console.log(\`- **Warnings:** \${report.summary.warnings}\`);
            " >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** Compliance report not available" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan:** ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality:** ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance:** ${{ needs.performance-test.result }}" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [ "${{ needs.compliance-check.result }}" == "success" ] && \
             [ "${{ needs.security-scan.result }}" == "success" ] && \
             [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All compliance checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some compliance checks failed. Please review the results above.**" >> $GITHUB_STEP_SUMMARY
          fi 